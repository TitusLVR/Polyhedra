import bpy
from bpy.types import Operator, Panel
from bpy.props import FloatVectorProperty
from bpy_extras.object_utils import AddObjectHelper, object_data_add
from mathutils import Vector


################################################# Great_dodecahedron
def add_object_great_dodecahedron(self, context):

    verts = [Vector((0.8506507873535156, 0.525731086730957, 0.0)), Vector((-0.8506507873535156, 0.525731086730957, 0.0)), Vector((0.8506507873535156, -0.525731086730957, 0.0)), Vector((-0.8506507873535156, -0.525731086730957, 0.0)), Vector((0.525731086730957, 0.0, 0.8506507873535156)), Vector((0.525731086730957, 0.0, -0.8506507873535156)), Vector((-0.525731086730957, 0.0, 0.8506507873535156)), Vector((-0.525731086730957, 0.0, -0.8506507873535156)), Vector((0.0, 0.8506507873535156, 0.525731086730957)), Vector((0.0, -0.8506507873535156, 0.525731086730957)), Vector((0.0, 0.8506507873535156, -0.525731086730957)), Vector((0.0, -0.8506507873535156, -0.525731086730957))]
    edges = []
    faces = [[9, 4, 8, 1, 3], [1, 10, 5, 11, 3], [9, 11, 5, 0, 4], [5, 7, 1, 8, 0], [3, 6, 8, 10, 7], [5, 10, 8, 4, 2], [7, 10, 0, 2, 11], [5, 2, 9, 3, 7], [1, 6, 4, 0, 10], [9, 6, 1, 7, 11], [6, 3, 11, 2, 4], [6, 9, 2, 0, 8]]
    
    mesh = bpy.data.meshes.new(name="Great_dodecahedron")
    mesh.from_pydata(verts, edges, faces)
    object_data_add(context, mesh, operator=self)

class CreateGreatDodecahedron(Operator, AddObjectHelper):
    
    bl_idname = "mesh.add_great_dodecahedron"
    bl_label = "Great_dodecahedron"
    bl_options = {'REGISTER', 'UNDO'}
    
    def execute(self, context):

        add_object_great_dodecahedron(self, context)
        
        return {'FINISHED'}
#################################################

################################################# Great stellated dodecahedron
def add_object_great_stellated_dodecahedron(self, context):

    verts = [Vector((0.5773502588272095, 0.5773502588272095, 0.5773502588272095)), Vector((-0.22052814066410065, -2.9802322387695312e-08, 0.35682207345962524)), Vector((0.35682201385498047, -0.2205282300710678, 0.0)), Vector((0.35682207345962524, 0.22052818536758423, 0.0)), Vector((1.4901161193847656e-08, 0.35682201385498047, 0.22052818536758423)), Vector((0.22052814066410065, -2.9802322387695312e-08, 0.35682207345962524)), Vector((-1.4901161193847656e-08, -0.35682210326194763, 0.22052818536758423)), Vector((-0.35682204365730286, 0.22052820026874542, 1.4901161193847656e-08)), Vector((-0.35682207345962524, -0.22052818536758423, 0.0)), Vector((-0.35682210326194763, -0.9341723322868347, 0.0)), Vector((-0.35682210326194763, 0.22052820026874542, 4.8221171056184176e-08)), Vector((-2.9802322387695312e-08, -0.35682207345962524, -0.22052815556526184)), Vector((-0.35682213306427, -0.22052809596061707, 5.960464477539063e-08)), Vector((0.22052815556526184, 0.0, -0.35682207345962524)), Vector((0.0, 0.35682207345962524, -0.22052815556526184)), Vector((-2.9802322387695312e-08, -0.35682207345962524, 0.22052814066410065)), Vector((0.0, -0.35682210326194763, 0.9341723322868347)), Vector((0.35682207345962524, 0.22052818536758423, 0.0)), Vector((0.22052821516990662, 5.960464477539063e-08, 0.35682207345962524)), Vector((0.22052817046642303, -4.470348358154297e-08, -0.35682213306427)), Vector((-9.209422557887592e-09, -0.35682207345962524, -0.2205282598733902)), Vector((-0.22052817046642303, 2.9802322387695312e-08, 0.35682207345962524)), Vector((0.9341723322868347, 0.0, 0.35682210326194763)), Vector((0.22052821516990662, 2.411058375173525e-08, 0.35682210326194763)), Vector((-2.9802322387695312e-08, -0.35682207345962524, -0.22052818536758423)), Vector((0.35682210326194763, -0.22052811086177826, 1.4901161193847656e-07)), Vector((-0.35682207345962524, -0.22052818536758423, -2.9802322387695312e-08)), Vector((0.0, -0.35682207345962524, 0.22052821516990662)), Vector((-0.22052812576293945, -8.940696716308594e-08, 0.35682210326194763)), Vector((0.0, -0.35682201385498047, -0.2205282300710678)), Vector((-0.22052812576293945, -5.960464477539063e-08, -0.35682207345962524)), Vector((-0.35682207345962524, 0.22052814066410065, 2.9802322387695312e-08)), Vector((-0.5773502588272095, 0.5773502588272095, 0.5773502588272095)), Vector((-0.22052818536758423, 2.9802322387695312e-08, 0.35682201385498047)), Vector((0.0, 0.35682210326194763, 0.9341723322868347)), Vector((1.4901161193847656e-08, 0.35682213306427, 0.22052818536758423)), Vector((-0.35682207345962524, -0.22052818536758423, 0.0)), Vector((-0.22052815556526184, 0.0, -0.35682207345962524)), Vector((4.604711723033006e-09, 0.35682210326194763, -0.22052821516990662)), Vector((0.22052815556526184, -1.4901161193847656e-08, 0.35682213306427)), Vector((-0.5773502588272095, 0.5773502588272095, -0.5773502588272095)), Vector((-0.9341723322868347, 0.0, 0.35682210326194763)), Vector((-0.22052821516990662, -4.604711723033006e-09, 0.35682210326194763)), Vector((-0.35682210326194763, 0.22052812576293945, 1.1920928955078125e-07)), Vector((0.5773502588272095, 0.5773502588272095, -0.5773502588272095)), Vector((0.35682207345962524, 0.22052818536758423, 0.0)), Vector((2.9802322387695312e-08, 0.35682207345962524, -0.22052818536758423)), Vector((0.35682204365730286, 0.22052818536758423, 1.4901161193847656e-08)), Vector((-0.35682207345962524, 0.22052815556526184, -8.940696716308594e-08)), Vector((0.0, 0.35682207345962524, 0.22052815556526184)), Vector((0.0, -0.35682210326194763, -0.9341723322868347)), Vector((0.22052820026874542, 4.604711723033006e-09, -0.35682207345962524)), Vector((-0.22052818536758423, 1.4901161193847656e-08, -0.35682207345962524)), Vector((0.22052814066410065, 5.960464477539063e-08, 0.35682207345962524)), Vector((1.4901161193847656e-08, 0.35682207345962524, 0.22052818536758423)), Vector((-0.35682210326194763, 0.9341723322868347, 0.0)), Vector((4.604711723033006e-09, 0.35682207345962524, -0.22052821516990662)), Vector((0.22052814066410065, 5.960464477539063e-08, -0.35682207345962524)), Vector((0.5773502588272095, -0.5773502588272095, -0.5773502588272095)), Vector((0.35682207345962524, -0.22052814066410065, -2.9802322387695312e-08)), Vector((-0.22052809596061707, 5.960464477539063e-08, -0.35682213306427)), Vector((-0.9341723322868347, 0.0, -0.35682210326194763)), Vector((-0.35682201385498047, -0.22052818536758423, 1.4901161193847656e-08)), Vector((-0.5773502588272095, -0.5773502588272095, 0.5773502588272095)), Vector((0.5773502588272095, -0.5773502588272095, 0.5773502588272095)), Vector((0.0, -0.35682207345962524, 0.22052815556526184)), Vector((0.0, 0.35682210326194763, -0.9341723322868347)), Vector((0.2205282300710678, 1.8418848668488863e-08, -0.35682213306427)), Vector((0.3568221628665924, -0.22052820026874542, -1.4901161193847656e-08)), Vector((0.9341723322868347, 0.0, -0.35682210326194763)), Vector((0.35682213306427, -0.22052809596061707, 5.960464477539063e-08)), Vector((0.35682210326194763, 0.9341723322868347, 0.0)), Vector((0.35682213306427, 0.22052821516990662, 3.332000986233652e-08)), Vector((0.0, 0.35682204365730286, -0.22052818536758423)), Vector((-0.22052818536758423, 0.0, -0.35682207345962524)), Vector((-0.5773502588272095, -0.5773502588272095, -0.5773502588272095)), Vector((5.960464477539063e-08, -0.35682207345962524, -0.22052814066410065)), Vector((0.35682210326194763, -0.9341723322868347, 0.0))]
    edges = []
    faces = [[4, 32, 1, 63, 6, 77, 2, 69, 3, 71], [6, 64, 5, 0, 4, 55, 7, 61, 8, 9], [14, 44, 13, 58, 11, 9, 12, 41, 10, 55], [20, 50, 19, 44, 17, 0, 18, 16, 15, 9], [23, 34, 21, 41, 26, 75, 24, 58, 25, 22], [27, 16, 28, 32, 31, 40, 30, 50, 29, 77], [35, 71, 38, 66, 37, 75, 36, 63, 33, 34], [42, 16, 39, 22, 45, 44, 46, 40, 43, 41], [49, 0, 47, 69, 51, 50, 52, 61, 48, 32], [54, 34, 53, 64, 59, 58, 57, 66, 56, 55], [60, 66, 67, 69, 68, 64, 65, 63, 62, 61], [72, 22, 70, 77, 76, 75, 74, 40, 73, 71]]
    mesh = bpy.data.meshes.new(name="Great stellated dodecahedron")
    mesh.from_pydata(verts, edges, faces)
    object_data_add(context, mesh, operator=self)

class CreateGreatStellatedDodecahedron(Operator, AddObjectHelper):
    
    bl_idname = "mesh.add_great_stellated_dodecahedron"
    bl_label = "Great_stellated_dodecahedron"
    bl_options = {'REGISTER', 'UNDO'}
    
    def execute(self, context):

        add_object_great_stellated_dodecahedron(self, context)
        
        return {'FINISHED'}
#################################################

################################################# Great icosahedron
def add_object_great_icosahedron(self, context):

    verts = [Vector((-0.8506507873535156, 0.525731086730957, 0.0)), Vector((0.0, 0.8506507873535156, 0.525731086730957)), Vector((0.0, 0.8506507873535156, -0.525731086730957)), Vector((-0.525731086730957, 0.0, -0.8506507873535156)), Vector((0.0, -0.8506507873535156, -0.525731086730957)), Vector((-0.8506507873535156, -0.525731086730957, 0.0)), Vector((-0.525731086730957, 0.0, 0.8506507873535156)), Vector((0.525731086730957, 0.0, -0.8506507873535156)), Vector((0.8506507873535156, 0.525731086730957, 0.0)), Vector((0.8506507873535156, -0.525731086730957, 0.0)), Vector((0.0, -0.8506507873535156, 0.525731086730957)), Vector((0.525731086730957, 0.0, 0.8506507873535156))]
    edges = []
    faces = [[10, 8, 0], [8, 6, 4], [11, 5, 7], [9, 1, 5], [7, 5, 1], [2, 4, 6], [11, 0, 4], [5, 2, 9], [6, 3, 9], [0, 7, 10], [9, 2, 6], [8, 4, 0], [1, 10, 7], [10, 1, 3], [9, 3, 1], [11, 7, 0], [5, 11, 2], [6, 8, 3], [4, 2, 11], [10, 3, 8]]
    mesh = bpy.data.meshes.new(name="Great icosahedron")
    mesh.from_pydata(verts, edges, faces)
    object_data_add(context, mesh, operator=self)

class CreateGreatIcosahedron(Operator, AddObjectHelper):
    
    bl_idname = "mesh.add_great_icosahedron"
    bl_label = "Great_icosahedron"
    bl_options = {'REGISTER', 'UNDO'}
    
    def execute(self, context):

        add_object_great_icosahedron(self, context)
        
        return {'FINISHED'}
#################################################

################################################# Small stellated dodecahedron
def add_object_small_stellated_dodecahedron(self, context):

    verts = [Vector((-0.20081141591072083, 0.525731086730957, 0.0)), Vector((-0.3249197006225586, 0.3249196708202362, -0.3249197006225586)), Vector((-0.8506507873535156, 0.525731086730957, 0.0)), Vector((-0.525731086730957, 0.0, 0.20081138610839844)), Vector((0.0, 0.8506507873535156, 0.525731086730957)), Vector((0.0, 0.8506507873535156, -0.525731086730957)), Vector((0.3249197006225586, 0.3249196410179138, -0.3249197006225586)), Vector((2.9802322387695312e-08, 0.20081138610839844, -0.525731086730957)), Vector((-0.3249197006225586, -0.3249196708202362, -0.3249197006225586)), Vector((-0.525731086730957, 0.0, -0.20081138610839844)), Vector((-0.525731086730957, 0.0, -0.8506507873535156)), Vector((0.0, -0.8506507873535156, -0.525731086730957)), Vector((-0.8506507873535156, -0.525731086730957, 0.0)), Vector((-0.3249197006225586, 0.3249196410179138, 0.3249197006225586)), Vector((0.20081140100955963, 0.525731086730957, 2.9802322387695312e-08)), Vector((0.0, 0.20081141591072083, 0.525731086730957)), Vector((0.3249197006225586, 0.3249196410179138, 0.3249197006225586)), Vector((-0.324919730424881, -0.3249197006225586, 0.3249196410179138)), Vector((0.0, -0.20081140100955963, 0.525731086730957)), Vector((-0.525731086730957, 0.0, 0.8506507873535156)), Vector((0.525731086730957, 0.0, 0.20081140100955963)), Vector((0.525731086730957, 0.0, -0.8506507873535156)), Vector((0.525731086730957, 0.0, -0.20081141591072083)), Vector((0.8506507873535156, 0.525731086730957, 0.0)), Vector((0.8506507873535156, -0.525731086730957, 0.0)), Vector((0.0, -0.20081138610839844, -0.525731086730957)), Vector((0.3249197006225586, -0.3249196708202362, -0.3249197006225586)), Vector((-0.20081141591072083, -0.525731086730957, 0.0)), Vector((0.3249197006225586, -0.3249197006225586, 0.3249196410179138)), Vector((0.0, -0.8506507873535156, 0.525731086730957)), Vector((0.525731086730957, 0.0, 0.8506507873535156)), Vector((0.20081141591072083, -0.525731086730957, 0.0))]
    edges = []
    faces = [[15, 19, 18, 29, 28, 24, 20, 23, 16, 4], [22, 23, 20, 30, 28, 29, 31, 11, 26, 21], [6, 5, 14, 4, 16, 30, 20, 24, 22, 21], [0, 2, 13, 19, 15, 30, 16, 23, 14, 5], [8, 10, 25, 21, 26, 24, 31, 29, 27, 12], [6, 23, 22, 24, 26, 11, 25, 10, 7, 5], [3, 2, 9, 10, 8, 11, 27, 29, 17, 19], [1, 2, 0, 4, 14, 23, 6, 21, 7, 10], [1, 2, 9, 12, 8, 11, 25, 21, 7, 5], [0, 5, 1, 10, 9, 12, 3, 19, 13, 4], [3, 12, 17, 29, 18, 30, 15, 4, 13, 2], [17, 12, 27, 11, 31, 24, 28, 30, 18, 19]]
    mesh = bpy.data.meshes.new(name="Small stellated dodecahedron")
    mesh.from_pydata(verts, edges, faces)
    object_data_add(context, mesh, operator=self)

class CreateSmallStellatedDodecahedron(Operator, AddObjectHelper):
    
    bl_idname = "mesh.add_small_stellated_dodecahedron"
    bl_label = "Small_stellated_dodecahedron"
    bl_options = {'REGISTER', 'UNDO'}
    
    def execute(self, context):

        add_object_small_stellated_dodecahedron(self, context)
        
        return {'FINISHED'}
#################################################
